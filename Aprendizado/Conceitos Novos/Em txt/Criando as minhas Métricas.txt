Vamos utilizar o Micrometer agora para criar métricas. (Lembre-se o Prometheus apenas coleta! - Tesmos que ter a dependencias do Prometheus no projeto)

⦁	A classe principal para criar métricas é a MeterRegistry. Podemos recebe-la pronta em nosso construtor, pois o Spring já a configura;

⦁	Exemplo de uso (criei a classe MinhasMetricas: 
@Component
class MinhasMetricas {
    
    private final MeterRegistry meterRegistry;

    public MinhasMetricas(MeterRegistry meterRegistry) {
    this.meterRegistry = meterRegistry;    
    }

}

⦁	Há vários tipos de métricas: contador (counter), temporizadores (timer) e medidor (gauge);

⦁	Vamos implementar primeiro a contador (por exemplo, conta quantos recrusos proposta foi criado). Na classe minha métrica fazer:

public void meuContador() {
    Collection<Tag> tags = new ArrayList<>();
    tags.add(Tag.of("emissora", "Mastercard"));
    tags.add(Tag.of("banco", "Itaú"));

    Counter contadorDePropostasCriadas = this.meterRegistry.counter("proposta_criada", tags);
    contadorDePropostasCriadas.increment();
}

Agora na classe PropostaController podemos ter uma instancia da classe MinhasMetricas e após criar uma proposta posso chamar o método meu contador: minhasMetricas.meuContador();

A metrica se chamara proposta_criada_total o (total é adicionado pelo Spring, pois se trata de uma métrica contadora). Devemos acessar http://localhost:8080/actuator/prometheus.

⦁	Metrica tipo Timer -Essa implementação não esta perfeita. Devemos usar anotação timer no método que quisermos medir o tempo de processamento, quado o método for acionado por um endpoint. O trecho a seguir  serviria caso quisessesmos medir o tempo de execução de outros método da nossa api... (Os temporizadores destinam-se a medir latências de curta duração e a frequência desses eventos. Todas as implementações do Timer relatam pelo menos o tempo total e a contagem de eventos como séries temporais separadas. Imagina que a API de consultar proposta está demorando demais, segundo os clientes, porém não temos métricas para saber se tem relação com o horário da consulta, quantidade de usuário, etc. Vamos criar uma métrica? Para essa tarefa precisamos utilizar o MeterRegistry e o método de criação de temporizadores)  código abaixo:

public void meuTimer(){
    Collection<Tag> tags = new ArrayList<>();
    tags.add(Tag.of("emissora", "Mastercard"));
    tags.add(Tag.of("banco", "Itaú"));

    Timer timerConsultarProposta = this.meterRegistry.timer("consultar_proposta", tags);
    timerConsultarProposta.record(() -> {
        // Método da sua operação
        detalheProposta();
    });
}

private void detalheProposta() {
}

Agora na classe PropostaController podemos ter uma instancia da classe MinhasMetricas e no método detalhe adicionar: minhasMetricas.meuTimer();
A metrica se chamara consultar_proposta_seconds o (seconds é adicionado pelo Spring, pois se trata de uma métrica Timer). Devemos acessar http://localhost:8080/actuator/prometheus.

⦁	Métrica Gauge (terei somente exemplo, não apliquei ela em Proposta)
Um medidor é uma alça para obter o valor atual. Exemplos típicos de medidores seriam o tamanho de uma coleção ou mapa ou o número de threads em um estado de execução.
Uma forma de visualizar esse tipo de métrica e fazer uma analogia com o velocímetro do carro, ele vai de zero até 100 e conforme você acelera ele sobe até o limite!
Quando falamos de limite geralmente utilizamos Gauge, pois imagina que temos um limite de número de threads e gostaríamos de saber quantas estão sendo utilizadas, por que quando chegar no limite, possivelmente irá acarretar alguns problemas, como perda de performance, erros, etc.
Vamos criar uma métrica?
Primeiro precisamos nosso exemplo, conforme código abaixo:

@Component
public class MinhasMetricas {

    private final MeterRegistry meterRegistry;

    private final Collection<String> strings = new ArrayList<>();

    private final Random random = new Random();

    public MinhasMetricas(MeterRegistry meterRegistry) {
        this.meterRegistry = meterRegistry;
        criarGauge();
    }

    public void criarGauge() {
        Collection<Tag> tags = new ArrayList<>();
        tags.add(Tag.of("emissora", "Mastercard"));
        tags.add(Tag.of("banco", "Itaú"));

        this.meterRegistry.gauge("meu_gauge", tags, strings, Collection::size);
    }

}
No código acima a gente criou um medidor que irá mostrar o tamanho da lista Collection::size, portanto, precisamos simular uma interação na lista, para isso vamos criar duas situações, uma que adiciona e outra que remove:

public void removeString() {
    strings.removeIf(Objects::nonNull);
}

public void addString() {
    strings.add(UUID.randomUUID().toString());
}
Agora que está tudo criado, vamos criar uma simulação que baseada se o número é par adiciona se for ímpar remove:

public void simulandoGauge() {
    double randomNumber = random.nextInt();
    if (randomNumber % 2 == 0) {
        addString();
    } else {
        removeString();
    }
}
Agora vamos utilizar da criatividade, vamos adicionar a anotação @Scheduled(fixedDelay = 1000) no método simulandoGauge.

Para testar, precisamos iniciar a aplicação!

Após iniciar a aplicação, vamos abrir o endereço http://localhost:8080/actuator/prometheus em seu navegador e procurar pelo nome da métrica meu_gauge.
